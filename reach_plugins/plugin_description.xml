<!-- Evalution Plugins -->
<library path="lib/libevaluation_plugins">
  <!-- Manipulability MoveIt -->
  <class name="reach_plugins/evaluation/ManipulabilityMoveIt" type="reach_plugins::evaluation::ManipulabilityMoveIt" base_class_type="reach_plugins::evaluation::EvaluationBase">
    <description>
      A pose evalution plugin which returns a score (range [0, inf)) that is the manipulability of robot at the input pose calculated from the robot's Jacobian.
      Higher scores indicate higher robot dexterity at a given pose.
    </description>
  </class>

  <!-- Joint Penalty MoveIt -->
  <class name="reach_plugins/evaluation/JointPenaltyMoveIt" type="reach_plugins::evaluation::JointPenaltyMoveIt" base_class_type="reach_plugins::evaluation::EvaluationBase">
    <description>
      A pose evaluation plugin which returns a score that is the product of each joint's distance from the middle of its joint range, according to the following equation:
      score[i] = ((joint[i] - joint_min[i])*(joint_max[i] - joint[i])) / (joint_max[i] - joint_min[i])^2
      The score for each joint will lie in the range [0, 0.25]; therefore, the score for an entire robot will lie in the range n*[0, 0.25], where n is the number of joints
      in the robot. Higher scores indicate poses which are closer to the nominal middle of travel of each joint. This plugin should be used if it is desirable for kinematic
      solutions to be near the middle of all joint ranges.
    </description>
  </class>

  <!-- Distance Penalty MoveIt -->
  <class name="reach_plugins/evaluation/DistancePenaltyMoveIt" type="reach_plugins::evaluation::DistancePenaltyMoveIt" base_class_type="reach_plugins::evaluation::EvaluationBase">
    <description>
      A pose evaluation plugin which returns a score (range [0, inf]) based on the robot's distance to the nearest collision, with respect to an input threshold and according
      to the following equation: score = (closest_distance_to_collision - input_threshold)^input_exponent.
      If the nearest distance to collision is less than the threshold, the score will exponentially approach zero; if the nearest distance collision is greater than the threshold,
      the score will exponentially approach infinity. This plugin should be used if it is desirable to prefer solutions that are at least the threshold distance away from collision.
    </description>
  </class>

  <!-- Multiplicative Factory -->
  <class name="reach_plugins/evaluation/MultiplicativeFactory" type="reach_plugins::evaluation::MultiplicativeFactory" base_class_type="reach_plugins::evaluation::EvaluationBase">
    <description>
      A pose evaluation plugin which loads other pose evaluation plugins and returns a score for an input pose that is the product of the scores of each individual plugin.
      This plugin allows for the use of any combination of other pose evaulation plugins.
    </description>
  </class>
</library>

<!-- IK Plugins -->
<library path="lib/libik_solver_plugins">
  <!-- MoveIt IK Solver -->
  <class name="reach_plugins/ik/MoveItIKSolver" type="reach_plugins::ik::MoveItIKSolver" base_class_type="reach_plugins::ik::IKSolverBase">
    <description>
      An inverse kinematics solver plugin which utilizes the MoveIt framework for solving robot inverse kinematics with respect to a given planning environment
    </description>
  </class>
  <!-- Discretized MoveIt IK Solver -->
  <class name="reach_plugins/ik/DiscretizedMoveItIKSolver" type="reach_plugins::ik::DiscretizedMoveItIKSolver" base_class_type="reach_plugins::ik::IKSolverBase">
    <description>
      An inverse kinematics solver plugin which utilizes the MoveIt framework for solving robot inverse kinematics with respect to a given planning environment
      This plugin discretizes the target pose around the Z-axis and outputs the solution with the highest score
    </description>
  </class>
</library>

<!-- Display Plugins -->
